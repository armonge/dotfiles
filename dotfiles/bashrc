#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# open new tabs in same directory
if [ -f /etc/profile.d/vte.sh ]; then
  source /etc/profile.d/vte.sh
fi

# Clojure
if [ -f /etc/profile.d/clojure.sh ]; then
  source /etc/profile.d/clojure.sh
  source /usr/share/bash-completion/completions/lein
  export LEIN_JAVA_CMD="$HOME/bin/drip"
fi

# fuck
eval $(thefuck --alias)

# history
shopt -s histappend
export HISTSIZE=5000
export HISTFILESIZE=10000
export HISTCONTROL=ignoreboth:erasedups

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Language
# I want some german, but my terminal needs english :P
export LANG=en_US.UTF-8

# This is github hub command
eval "$(hub alias -s)"

# bat cat replacement
export BAT_THEME="Monokai Extended"

# python
export PATH=$PATH:$HOME/.local/bin

# VIM
export VISUAL="nvim -u NONE"
export EDITOR="nvim -u NONE"

# GO
export GOPATH=$(go env GOPATH)
export PATH=$PATH:$(go env GOPATH)/bin

# Azure Storage Explorer
export PATH=$HOME/bin/StorageExplorer:$PATH

# Azure Functions Cli
export PATH=$HOME/bin/azure-functions-cli:$PATH

# Oni
export PATH=$HOME/bin/Oni:$PATH

# Android
export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH

# Android Studio
export PATH=$HOME/bin/android-studio/bin:$PATH

# Rust
export PATH=$HOME/.cargo/bin:$PATH

# git
if [ -f /usr/share/git/completion/git-completion.bash ]; then
  source /usr/share/git/completion/git-completion.bash
  source /usr/share/git/completion/git-prompt.sh
fi
export GIT_PS1_SHOWCOLORHINTS=1
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWDIRTYSTATE=1

PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
enter_directory() {
  if [ "$PWD" != "$PREV_PWD" ]; then
    PREV_PWD="$PWD"
    if [ -e ".nvmrc" ]; then
      nvm use
    fi

    if [ -e ".bashenv" ]; then
      source ".bashenv"
    fi
  fi
  __git_ps1 "\\u@\\h:\\W" "\\\$ "
}

export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} enter_directory"

# gitignore.io
function gi() { curl -L -s https://www.gitignore.io/api/$@; }

# ~/bin
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
export PATH="$HOME/.gem/ruby/2.6.0/bin:$PATH"
export PATH="$HOME/.gem/ruby/2.5.0/bin:$PATH"

# Django
if [ -f $HOME/bin/django_bash_completion ]; then
  source $HOME/bin/django_bash_completion
fi

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

# jmeter
export PATH=$HOME/bin/apache-jmeter-3.2/bin:$PATH

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[ -f /home/armonge/.config/yarn/global/node_modules/serverless/node_modules/tabtab/.completions/serverless.bash ] && . /home/armonge/.config/yarn/global/node_modules/serverless/node_modules/tabtab/.completions/serverless.bash
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[ -f /home/armonge/.config/yarn/global/node_modules/serverless/node_modules/tabtab/.completions/sls.bash ] && . /home/armonge/.config/yarn/global/node_modules/serverless/node_modules/tabtab/.completions/sls.bash
# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/armonge/bin/google-cloud-sdk/path.bash.inc' ]; then source '/home/armonge/bin/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/armonge/bin/google-cloud-sdk/completion.bash.inc' ]; then source '/home/armonge/bin/google-cloud-sdk/completion.bash.inc'; fi

# Snap
export PATH="$PATH:/var/lib/snapd/snap/bin"
export PATH="$PATH:/opt/mssql-tools/bin"

# Wey
export PATH="$PATH:$HOME/bin/wey"

# SqlOps
export PATH="$PATH:$HOME/bin/sqlops-linux-x64/"

export PATH=$PATH:$HOME/bin

if [ -f "$HOME/bin/azure-cli/az.completion" ]; then
  source "$HOME/bin/azure-cli/az.completion"
fi

# entr
export PATH=$PATH:$HOME/bin/entr/bin:$PATH

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PYTHON_CONFIGURE_OPTS="--enable-shared"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# AWS
complete -C "$HOME/.local/bin/aws_completer" aws

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# FZF
if [ -f /usr/share/fzf/key-bindings.bash ]; then
  source /usr/share/fzf/key-bindings.bash
  source /usr/share/fzf/completion.bash
elif [ -f ~/.fzf.bash ]; then
  source ~/.fzf.bash
fi
export FZF_DEFAULT_COMMAND='ag --follow --nocolor --filename-pattern "" --hidden --ignore ".git/*"'
export FZF_CTRL_R_OPTS

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color | *-256color) color_prompt=yes ;;
esac

if [ "$color_prompt" = yes ]; then
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# added by travis gem
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh
