#!/bin/bash
# shellcheck disable=SC1091
# ~/.bashrc
#
# shellcheck disable=SC1090
# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific aliases and functions
if [ -d ~/.bashrc.d ]; then
	for rc in ~/.bashrc.d/*; do
		if [ -f "$rc" ]; then
			. "$rc"
		fi
	done
fi

unset rc

# User specific environment
if ! [[ $PATH =~ ${HOME}/.local/bin:${HOME}/bin: ]]; then
	PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

export XDG_CONFIG_HOME=$HOME/.config

if [ -f "/opt/homebrew/bin/brew" ]; then
	# We're on Mac :shrug:
	export BASH_SILENCE_DEPRECATION_WARNING=1
	eval "$(/opt/homebrew/bin/brew shellenv)"

	export LDFLAGS="-L/opt/homebrew/opt/mysql-client/lib:/opt/homebrew/opt/libssh2/lib/"
	export CPPFLAGS="-I/opt/homebrew/opt/mysql-client/include -I/opt/homebrew/opt/libssh2/include/ -I/opt/homebrew/Cellar/libssh2/1.11.1/include/"
	export PKG_CONFIG_PATH="/opt/homebrew/opt/mysql-client/lib/pkgconfig"
	export PATH="/opt/homebrew/opt/mysql-client/bin:$PATH"

	export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"

	[[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"
fi

# fuck
# eval "$(thefuck --alias)"

# history
shopt -s histappend
export HISTSIZE=1000
export HISTFILESIZE=200000
export HISTCONTROL=ignoreboth:erasedups

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Language
# I want some german, but my terminal needs english :P
export LANG=en_US.UTF-8

# bat cat replacement
export BAT_THEME="tokyonight_night"
export BAT_PAGER="less -i --RAW-CONTROL-CHARS --quit-if-one-screen"

export PYGMENTIZE_STYLE='nord'

# VIM
export NVIM_TUI_ENABLE_TRUE_COLOR=1
export VISUAL="vim -u ~/.config/nvim/editor.lua"
export EDITOR="vim -u ~/.config/nvim/editor.lua"

# GO
if [ -f "$HOME/.gvm/scripts/gvm" ]; then
	source "$HOME/.gvm/scripts/gvm"
fi

if command -v go &>/dev/null; then
	GOPATH=$(go env GOPATH)
	export PATH=$PATH:$GOPATH/bin
fi

# Android
export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH

# Rust
export PATH=$HOME/.cargo/bin:$PATH

# git
if [ -f /usr/share/git/completion/git-completion.bash ]; then
	source /usr/share/git/completion/git-completion.bash
	source /usr/share/git/completion/git-prompt.sh
fi

if [ -f /usr/share/git-core/contrib/completion/git-prompt.sh ]; then
	source /usr/share/git-core/contrib/completion/git-prompt.sh
fi

if [ -f /etc/bash_completion.d/git-prompt ]; then
	source /etc/bash_completion.d/git-prompt
fi

# Only load starship in interactive shells, not from a script or from scp
[[ $- == *i* ]] && eval "$(starship init bash)"

# gitignore.io
function gi() { curl -L -s "https://www.gitignore.io/api/${*}"; }

# NVM
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
export NODE_VERSION_PREFIX=v
export NODE_VERSIONS="${NVM_DIR}/versions/node"
if [ -d "$NVM_DIR" ]; then
	export NVM_DIR="$HOME/.config/nvm"
	export NVM_SYMLINK_CURRENT=true
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
	cdnvm() {
		command cd "$@"
		nvm_path=$(nvm_find_up .nvmrc | tr -d '\n')

		# If there are no .nvmrc file, use the default nvm version
		if [[ $nvm_path != *[^[:space:]]* ]]; then

			declare default_version
			default_version=$(nvm version default)

			# If there is no default version, set it to `node`
			# This will use the latest version on your machine
			if [[ $default_version == "N/A" ]]; then
				nvm alias default node
				default_version=$(nvm version default)
			fi

			# If the current version is not the default version, set it to use the default version
			if [[ $(nvm current) != "$default_version" ]]; then
				nvm use default
			fi

		elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
			declare nvm_version
			nvm_version=$(<"$nvm_path"/.nvmrc)

			declare locally_resolved_nvm_version
			# `nvm ls` will check all locally-available versions
			# If there are multiple matching versions, take the latest one
			# Remove the `->` and `*` characters and spaces
			# `locally_resolved_nvm_version` will be `N/A` if no local versions are found
			locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

			# If it is not already installed, install it
			# `nvm install` will implicitly use the newly-installed version
			if [[ $locally_resolved_nvm_version == "N/A" ]]; then
				nvm install "$nvm_version"
			elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
				nvm use "$nvm_version"
			fi
		fi
	}
	alias cd='cdnvm'
	cd "$PWD"
	export PATH="$PATH:$NVM_DIR/current/bin"
fi

# python {
export PATH=$PATH:$HOME/.local/bin
export PATH="$HOME/.poetry/bin:$PATH"
export PIPENV_VENV_IN_PROJECT=1
export PYTHONDONTWRITEBYTECODE=1

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PYENV_VIRTUALENV_VERBOSE_ACTIVATE=true
export PYTHON_CONFIGURE_OPTS="--enable-shared --with-tcltk-includes --with-tcltk-libs"
export PATH="$HOME/.pyenv/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
	eval "$(pyenv init -)"
	eval "$(pyenv init --path)"
	eval "$(pyenv virtualenv-init -)"

	if pyenv which inv &>/dev/null; then
		source <(inv --print-completion-script bash)
	fi

fi

# AWS
if command -v aws &>/dev/null; then
	complete -C "$(which aws_completer)" aws
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /usr/share/bash-completion/bash_completion ]; then
	source /usr/share/bash-completion/bash_completion
elif [ -f /etc/bash_completion ]; then
	source /etc/bash_completion
fi

# FZF
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
[ -f /usr/share/fzf/shell/key-bindings.bash ] && source /usr/share/fzf/shell/key-bindings.bash
[ -f /usr/share/fzf/key-bindings.bash ] && source /usr/share/fzf/key-bindings.bash
[ -f /usr/share/fzf/completion.bash ] && source /usr/share/fzf/completion.bash
[ -f /usr/share/bash-completion/completions/fzf ] && source /usr/share/bash-completion/completions/fzf
[ -f /usr/share/doc/fzf/examples/key-bindings.bash ] && source /usr/share/doc/fzf/examples/key-bindings.bash

export FZF_DEFAULT_OPTS="--ansi --layout reverse --margin=1,4 "
export FZF_DEFAULT_COMMAND='ag --follow --nocolor --filename-pattern "" --hidden --ignore ".git/*" --ignore ".direnv/*" --depth=-1'
export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"

if command -v batcat &>/dev/null; then
	export FZF_CTRL_T_OPTS="--preview-window 'right:60%' --layout reverse --margin=1,4 --preview 'batcat --theme='Nord' --color=always --style=header,grid --line-range :300 {}'  "
else
	export FZF_CTRL_T_OPTS="--preview-window 'right:60%' --layout reverse --margin=1,4 --preview 'bat --theme='Nord' --color=always --style=header,grid --line-range :300 {}'  "
fi

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
export PATH="$PATH:$HOME/.rvm/bin"

export NODE_OPTIONS="--max_old_space_size=16384 "
export NODE_NO_WARNINGS=1

if command -v npm &>/dev/null; then
	source <(npm completion)
fi

if command -v direnv &>/dev/null; then
	eval "$(direnv hook bash)"
fi

# https://cloud.google.com/sdk/gcloud/reference/topic/startup
export CLOUDSDK_PYTHON=python3

# source "$HOME/bin/emsdk/emsdk_env.sh" 2>/dev/null
if [ -f "${HOME}/.dir_colors" ]; then
	eval "$(dircolors ~/.dir_colors)"
fi

if [ -f "${HOME}/.config/broot/launcher/bash/br" ]; then
	source "${HOME}/.config/broot/launcher/bash/br"
fi

if [ -f "$HOME/.cargo/env" ]; then
	source "$HOME/.cargo/env"
fi

if [ -d "${HOME}/dotfiles" ]; then
	# Your dotdrop git repository location
	export DOTREPO="$HOME/dotfiles"
	source "${DOTREPO}/dotdrop/completion/dotdrop-completion.bash"
else
	echo "NO DOTFILES ${HOME}/dotfiles"
fi

# https://ask.fedoraproject.org/t/intel-graphics-best-practices-and-settings-for-hardware-acceleration/21119
# Intel Graphics - Best practices and settings for hardware acceleration?
export LIBVA_DRIVER_NAME=iHD

if command -v helm &>/dev/null; then
	source <(helm completion bash)
fi

. "$HOME/.cargo/env"

export PATH="$HOME/.local/share/nvim/mason/bin:$PATH"

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/bin/google-cloud-sdk/path.bash.inc" ]; then
	source "$HOME/bin/google-cloud-sdk/path.bash.inc"
fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/bin/google-cloud-sdk/completion.bash.inc" ]; then
	source "$HOME/bin/google-cloud-sdk/completion.bash.inc"
fi

if command -v kubectl &>/dev/null; then
	source <(kubectl completion bash)
fi

if command -v k9s &>/dev/null; then
	eval "$(k9s completion bash)"
fi

export ERG_PATH="$HOME/.local/share/nvim/mason/packages/erg"
export PATH="$HOMEBREW_PREFIX/lib/ruby/gems/3.4.0/bin:$PATH"
export LUA_CPATH="$HOME/.luarocks/lib/lua/5.1/?.so;$HOME/.luarocks/lib/lua/5.1/loadall.so"

# pnpm
export PNPM_HOME="/Users/andres.monge/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
#
#
#
export DOTDROP_VIRTUALENV="${HOME}/dotfiles/.venv"
