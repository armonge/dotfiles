#!/bin/bash
# ~/.bashrc
#
# shellcheck disable=SC1090

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# open new tabs in same directory
if [ -f /etc/profile.d/vte.sh ]; then
	source /etc/profile.d/vte.sh
fi

# Clojure
if [ -f /etc/profile.d/clojure.sh ]; then
	source /etc/profile.d/clojure.sh
	source /usr/share/bash-completion/completions/lein
	export LEIN_FAST_TRAMPOLINE=true
	export LEIN_JAVA_CMD="$HOME/bin/drip"
fi

# fuck
eval "$(thefuck --alias)"

# history
shopt -s histappend
export HISTSIZE=5000
export HISTFILESIZE=10000
export HISTCONTROL=ignoreboth:erasedups

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Language
# I want some german, but my terminal needs english :P
export LANG=en_US.UTF-8

# bat cat replacement
export BAT_THEME="Monokai Extended"

# python
export PATH=$PATH:$HOME/.local/bin
export PATH="$HOME/.poetry/bin:$PATH"

# VIM
export VISUAL="nvim -u NONE"
export EDITOR="nvim -u NONE"

# GO
export GOPATH=$(go env GOPATH)
export PATH=$HOME/bin/go/bin:$PATH
export PATH=$PATH:$(go env GOPATH)/bin

# Azure Storage Explorer
export PATH=$HOME/bin/StorageExplorer:$PATH

# Azure Functions Cli
export PATH=$HOME/bin/azure-functions-cli:$PATH

# Android
export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH

# Android Studio
export PATH=$HOME/bin/android-studio/bin:$PATH

# Rust
export PATH=$HOME/.cargo/bin:$PATH

# git
if [ -f /usr/share/git/completion/git-completion.bash ]; then
	source /usr/share/git/completion/git-completion.bash
	source /usr/share/git/completion/git-prompt.sh
fi
export GIT_PS1_SHOWCOLORHINTS=1
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWDIRTYSTATE=1

fmt_time() { #format time just the way I likes it
	if [[ "$(date +%p)" == "PM" ]]; then
		meridiem="pm"
	else
		meridiem="am"
	fi
	date +"%l:%M:%S$meridiem" | sed 's/ //g'
}

pwdtail() { #returns the last 2 fields of the working directory
	pwd | awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}

enter_directory() {
	if [[ $? -eq 0 ]]; then # set an error string for the prompt, if applicable
		ERRPROMPT=" "
	else
		ERRPROMPT='->($?) '
	fi
	if [[ '$(type -t __git_ps1)' ]]; then # if we're in a Git repo, show current branch
		BRANCH="\$(__git_ps1 '[ %s ] ')"
	fi
	local TIME=$(fmt_time) # format time for prompt string
	local LOAD=$(uptime | awk '{min=NF-2;print $min}')
	local GREEN="\[\033[0;32m\]"
	local CYAN="\[\033[0;36m\]"
	local BCYAN="\[\033[1;36m\]"
	local BLUE="\[\033[0;34m\]"
	local GRAY="\[\033[0;37m\]"
	local DKGRAY="\[\033[1;30m\]"
	local WHITE="\[\033[1;37m\]"
	local RED="\[\033[0;31m\]"
	# return color to Terminal setting for text color
	local DEFAULT="\[\033[0;39m\]"
	# set the titlebar to the last 2 fields of pwd
	local TITLEBAR="\[\e]2;$(pwdtail)\a"
	export PS1="\[${TITLEBAR}\]${GREEN}[ ${GREEN}\u${GREEN}@${GREEN}\h  ${GREEN}]${RED}$ERRPROMPT${GRAY}\
\w\n${GREEN}${BRANCH}${DEFAULT}$ "
}

export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} enter_directory"

# gitignore.io
function gi() { curl -L -s "https://www.gitignore.io/api/$@"; }

# ~/bin
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.gem/ruby/2.6.0/bin:$PATH"
export PATH="$HOME/.gem/ruby/2.5.0/bin:$PATH"

# Django
if [ -f "$HOME/bin/django_bash_completion" ]; then
	source "$HOME/bin/django_bash_completion"
fi

# NVM
export NVM_DIR="$HOME/.nvm"
export NVM_SYMLINK_CURRENT=true
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
export PATH="$PATH:$NVM_DIR/current/bin"

# jmeter
export PATH=$HOME/bin/apache-jmeter-3.2/bin:$PATH

# Snap
export PATH="$PATH:/var/lib/snapd/snap/bin"
export PATH="$PATH:/opt/mssql-tools/bin"

# Wey
export PATH="$PATH:$HOME/bin/wey"

# SqlOps
export PATH="$PATH:$HOME/bin/sqlops-linux-x64/"

export PATH=$PATH:$HOME/bin

if [ -f "$HOME/bin/azure-cli/az.completion" ]; then
	source "$HOME/bin/azure-cli/az.completion"
fi

# entr
export PATH=$PATH:$HOME/bin/entr/bin:$PATH

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PYENV_VIRTUALENV_VERBOSE_ACTIVATE=true
export PYTHON_CONFIGURE_OPTS="--enable-shared"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
fi

# todo.txt
export PATH="$HOME/bin/todo.txt:$PATH"

if [ -f ~/bin/todo.txt ]; then
	source "$HOME/bin/todo.txt/todo_completion"
	complete -F _todo t
fi

# AWS
complete -C "$HOME/.pyenv/shims/aws_completer" aws

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		source /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		source /etc/bash_completion
	fi
fi

# FZF
if [ -f /usr/share/fzf/key-bindings.bash ]; then
	source /usr/share/fzf/key-bindings.bash
	source /usr/share/fzf/completion.bash
elif [ -f ~/.fzf.bash ]; then
	source ~/.fzf.bash
fi
export FZF_DEFAULT_COMMAND='ag --follow --nocolor --filename-pattern "" --hidden --ignore ".git/*" --depth=-1'
export FZF_CTRL_R_OPTS

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# added by travis gem
[ -f "$HOME/.travis/travis.sh" ] && source "$HOME/.travis/travis.sh"

# BEGIN SNIPPET: Platform.sh CLI configuration
HOME=${HOME:-'/home/armonge'}
export PATH="$HOME/"'.platformsh/bin':"$PATH"
if [ -f "$HOME/"'.platformsh/shell-config.rc' ]; then . "$HOME/"'.platformsh/shell-config.rc'; fi # END SNIPPET

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/armonge/bin/google-cloud-sdk/path.bash.inc' ]; then . '/home/armonge/bin/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/armonge/bin/google-cloud-sdk/completion.bash.inc' ]; then . '/home/armonge/bin/google-cloud-sdk/completion.bash.inc'; fi

# Kubernetes
source <(kubectl completion bash)

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
export PATH="$PATH:$HOME/.rvm/bin"

[ -s "/home/armonge/.jabba/jabba.sh" ] && source "/home/armonge/.jabba/jabba.sh"

export NODE_OPTIONS="--max_old_space_size=4096"
export NODE_NO_WARNINGS=1

export PATH="$(composer config -g home)/vendor/bin:$PATH"

# Include Drush bash customizations.
if [ -f "/home/armonge/.drush/drush.bashrc" ]; then
	source /home/armonge/.drush/drush.bashrc
fi

# Include Drush completion.

if [ -f "$HOME/.drush/drush.complete.sh" ]; then
	source $HOME/.drush/drush.complete.sh
fi

# Include Drush prompt customizations.

if [ -f "$HOME/.drush/drush.prompt.sh" ]; then
	source "$HOME/.drush/drush.prompt.sh"
fi

_direnv_hook() {
	local previous_exit_status=$?
	eval "$("/usr/bin/direnv" export bash)"
	return $previous_exit_status
}
if ! [[ ${PROMPT_COMMAND:-} =~ _direnv_hook ]]; then
	PROMPT_COMMAND="_direnv_hook${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
fi

# Add .NET Core SDK tools
export PATH="$PATH:/home/armonge/.dotnet/tools"

export PATH="$PATH:$HOME/.bash-my-aws/bin"
source ~/.bash-my-aws/aliases
