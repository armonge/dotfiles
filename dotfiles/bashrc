#!/bin/bash
# shellcheck disable=SC1091
# ~/.bashrc
#
# shellcheck disable=SC1090

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# open new tabs in same directory
if [ -f /etc/profile.d/vte.sh ]; then
	source /etc/profile.d/vte.sh
fi

# Clojure
if [ -f /etc/profile.d/clojure.sh ]; then
	source /etc/profile.d/clojure.sh
	source /usr/share/bash-completion/completions/lein
	export LEIN_FAST_TRAMPOLINE=true
	export LEIN_JAVA_CMD="$HOME/bin/drip"
fi

# fuck
# eval "$(thefuck --alias)"

# history
shopt -s histappend
export HISTSIZE=1000
export HISTFILESIZE=200000
export HISTCONTROL=ignoreboth:erasedups

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Language
# I want some german, but my terminal needs english :P
export LANG=en_US.UTF-8

# bat cat replacement
export BAT_THEME="Nord"
export BAT_PAGER="less --RAW-CONTROL-CHARS --quit-if-one-screen"

# python
export PATH=$PATH:$HOME/.local/bin
export PATH="$HOME/.poetry/bin:$PATH"
export PIPENV_VENV_IN_PROJECT="enabled"

# VIM
export NVIM_TUI_ENABLE_TRUE_COLOR=1
export VISUAL="nvim.appimage -u NONE"
export EDITOR="nvim.appimage -u NONE"

# GO
[[ -s "/home/armonge/.gvm/scripts/gvm" ]] && source "/home/armonge/.gvm/scripts/gvm"
GOPATH=$(go env GOPATH)
export GOPATH
export PATH=$PATH:$GOPATH/bin

# Azure Storage Explorer
export PATH=$HOME/bin/StorageExplorer:$PATH

# Azure Functions Cli
export PATH=$HOME/bin/azure-functions-cli:$PATH

# Android
export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH

# Android Studio
export PATH=$HOME/bin/android-studio/bin:$PATH

# Rust
export PATH=$HOME/.cargo/bin:$PATH

# git
if [ -f /usr/share/git/completion/git-completion.bash ]; then
	source /usr/share/git/completion/git-completion.bash
	source /usr/share/git/completion/git-prompt.sh
fi

if [ -f /etc/bash_completion.d/git-prompt ]; then
	source /etc/bash_completion.d/git-prompt
fi
export GIT_PS1_SHOWCOLORHINTS=1
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWDIRTYSTATE=1
export PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '

# gitignore.io
function gi() { curl -L -s "https://www.gitignore.io/api/${*}"; }

# ~/bin
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.gem/ruby/2.6.0/bin:$PATH"
export PATH="$HOME/.gem/ruby/2.5.0/bin:$PATH"

# Django
if [ -f "$HOME/bin/django_bash_completion" ]; then
	source "$HOME/bin/django_bash_completion"
fi

# NVM
export NVM_DIR="$HOME/.nvm"
export NVM_SYMLINK_CURRENT=true
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
export PATH="$PATH:$NVM_DIR/current/bin"

# jmeter
export PATH=$HOME/bin/apache-jmeter-3.2/bin:$PATH

# Snap
export PATH="$PATH:/var/lib/snapd/snap/bin"
export PATH="$PATH:/opt/mssql-tools/bin"

# Wey
export PATH="$PATH:$HOME/bin/wey"

# SqlOps
export PATH="$PATH:$HOME/bin/sqlops-linux-x64/"

export PATH=$PATH:$HOME/bin

if [ -f "$HOME/bin/azure-cli/az.completion" ]; then
	source "$HOME/bin/azure-cli/az.completion"
fi

# entr
export PATH=$PATH:$HOME/bin/entr/bin:$PATH

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PYENV_VIRTUALENV_VERBOSE_ACTIVATE=true
export PYTHON_CONFIGURE_OPTS="--enable-shared --with-tcltk-includes --with-tcltk-libs"
export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
fi

# todo.txt
export PATH="$HOME/bin/todo.txt:$PATH"

if [ -f ~/bin/todo.txt ]; then
	source "$HOME/bin/todo.txt/todo_completion"
	complete -F _todo t
fi

# AWS
complete -C "$(which aws_completer)" aws

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		source /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		source /etc/bash_completion
	fi
fi

# FZF
if [ -f /usr/share/fzf/key-bindings.bash ]; then
	source /usr/share/fzf/key-bindings.bash
	source /usr/share/fzf/completion.bash
elif [ -f ~/.fzf.bash ]; then
	source ~/.fzf.bash
fi
export FZF_DEFAULT_COMMAND='ag --follow --nocolor --filename-pattern "" --hidden --ignore ".git/*" --depth=-1'
export FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --layout reverse --margin=1,4 --preview 'bat --color=always --style=header,grid --line-range :300 {}'"
export FZF_CTRL_R_OPTS

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# added by travis gem
# [ -f "$HOME/.travis/travis.sh" ] && source "$HOME/.travis/travis.sh"

# BEGIN SNIPPET: Platform.sh CLI configuration
export PATH="$HOME/"'.platformsh/bin':"$PATH"
if [ -f "$HOME/"'.platformsh/shell-config.rc' ]; then . "$HOME/"'.platformsh/shell-config.rc'; fi # END SNIPPET

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/bin/google-cloud-sdk/path.bash.inc" ]; then . "$HOME/bin/google-cloud-sdk/path.bash.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/bin/google-cloud-sdk/completion.bash.inc" ]; then . "$HOME/bin/google-cloud-sdk/completion.bash.inc"; fi

# Kubernetes
# source <(kubectl completion bash)

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
export PATH="$PATH:$HOME/.rvm/bin"

[ -s "$HOME/.jabba/jabba.sh" ] && source "$HOME/.jabba/jabba.sh"

export NODE_OPTIONS="--max_old_space_size=16384 --experimental-repl-await"
export NODE_NO_WARNINGS=1
# NODE_ICU_DATA="$(node-full-icu-path)"
# export NODE_ICU_DATA

source <(npm completion)

PATH="$(composer config -g home)/vendor/bin:$PATH"
export PATH

# Include Drush bash customizations.
if [ -f "$HOME/.drush/drush.bashrc" ]; then
	source "$HOME/.drush/drush.bashrc"
fi

# Include Drush completion.

if [ -f "$HOME/.drush/drush.complete.sh" ]; then
	source "$HOME/.drush/drush.complete.sh"
fi

# Include Drush prompt customizations.

if [ -f "$HOME/.drush/drush.prompt.sh" ]; then
	source "$HOME/.drush/drush.prompt.sh"
fi

eval "$(direnv hook bash)"

# Add .NET Core SDK tools
export PATH="$PATH:$HOME/.dotnet/tools"
export FrameworkPathOverride=/etc/mono/4.5

export PATH="$PATH:$HOME/bin/VSCode-linux-x64/bin"
export PATH="$HOME/.ebcli-virtual-env/executables:$PATH"

# https://cloud.google.com/sdk/gcloud/reference/topic/startup
export CLOUDSDK_PYTHON=python3

# Flutter and dart
# FLUTTER_SDK_PATH=$(flutter sdk-path)
# export PATH="$PATH:$HOME/.pub-cache/bin"
# export PATH="$PATH:$FLUTTER_SDK_PATH/bin"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME.sdkman/bin/sdkman-init.sh" ]] && source "$HOME.sdkman/bin/sdkman-init.sh"

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
# source "$HOME/bin/emsdk/emsdk_env.sh" 2>/dev/null
eval "$(dircolors ~/.dir_colors/dircolors)"

if [ "$DESKTOP_SESSION" = "i3" ]; then
	export "$(gnome-keyring-daemon -s)"
fi

# Balena
export PATH="$HOME/bin/balena-cli:$PATH"

source /home/armonge/.config/broot/launcher/bash/br
. "$HOME/.cargo/env"

PATH="/home/armonge/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/armonge/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/armonge/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/armonge/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/armonge/perl5"; export PERL_MM_OPT;
